//////////////////////////////////////////////////////////////////////////////
///
///  @file systick.h
///
///  Setup and handle systick timer and interrupt
///
//////////////////////////////////////////////////////////////////////////////

#ifndef SYSTICK_H
#define SYSTICK_H

#include <stdint.h>
#include "LPC11xx.h"

//////////////////////////////////////////////////////////////////////////////
///
/// System Timers that can be allocated
///
///////////////////////////////////////////////////////////////////////////// 


typedef struct SYSTICK_TIMER
{
   int32_t timeout;
   int32_t timer;
   callback_t callback;
} systick_timer_t;



//////////////////////////////////////////////////////////////////////////////
///
///  \b systick_init
///
///  @brief Initialize the systick timer and turn on interrupt
///
///  @param[in]  irq_freq  frequency of systick counts
///  @param[in]  tim       Array of timers
///  @param[in]  num       Number of timers in array
///
//////////////////////////////////////////////////////////////////////////////

void systick_init(uint32_t irq_freq, systick_timer_t *tim, uint8_t num);


//////////////////////////////////////////////////////////////////////////////
///
///  \b systick_get_ticks
///
///  @brief gets value of tick counter
///
///  @return The number of timer ticks since startup
///
//////////////////////////////////////////////////////////////////////////////
uint32_t systick_get_ticks(void);

//////////////////////////////////////////////////////////////////////////////
///
///  \b systick_get_milliseconds
///
///  @brief gets value of milliseconds
///
///  @return number of milliseconds since startup
///
//////////////////////////////////////////////////////////////////////////////
uint32_t systick_get_milliseconds(void);

uint64_t systick_get_milliseconds_long(void);

//////////////////////////////////////////////////////////////////////////////
///
///  \b systick_set_timer
///
///  @brief sets a timer for further use
///  
///  @param[in]  index  timer number 0 to n-1
///  @param[in]  ms     number of milliseconds to run
///  @param[in]  repeat one shot or repeating
///
//////////////////////////////////////////////////////////////////////////////
void systick_set_timer(uint32_t index, int32_t ms, uint8_t repeat);

//////////////////////////////////////////////////////////////////////////////
///
///  \b systick_get_timer
///  
///  @brief returns remaining time of the timer
/// 
///  @param index  timer number 0 to n-1
///  @return   Number of milliseconds remaining on timer
///
//////////////////////////////////////////////////////////////////////////////
int32_t systick_get_timer(uint32_t index);

//////////////////////////////////////////////////////////////////////////////
///
///  \b systick_set_callback
///
///  @brief sets callback of timer
///
///  @param[in]  index   timer number to set 0 to n-1
///  @param[in   callback  pointer to callback function
///
//////////////////////////////////////////////////////////////////////////////
void systick_set_callback(uint32_t index, callback_t callback);


//////////////////////////////////////////////////////////////////////////////
///
///  \b Systick_Handler
///
///  @brief Systick Timer interrupt handler
///
/////////////////////////////////////////////////////////////////////////////
   void SysTick_Handler(void);


#endif
